// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:dio/dio.dart';
import 'dart:async';
import 'package:core/core.dart';
import '../../models/models.dart';
import '../remote/product_rest_client/product_rest_client.dart';

class ProductRepository extends BaseRepository {
  late final restClient = ProductRestClient(findInstance<Dio>());

  Future<BaseResponse<Product>> create(Product data) {
    final cancelToken = CancelToken();
    return getResponse(
      () => restClient.create(data: data.toJson(), cancelToken: cancelToken),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Product>> update(String id, Product data) {
    final cancelToken = CancelToken();
    return getResponse(
      () => restClient.update(id: id, data: data.toJson(), cancelToken: cancelToken),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<ListResponse<Product>>> findAll(int page, {String? query}) {
    final cancelToken = CancelToken();
    return getResponse(
      () => restClient.findAll(page: page, query: query, cancelToken: cancelToken),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<Product>> findOne(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => restClient.findOne(id: id, cancelToken: cancelToken),
      cancelToken: cancelToken,
    );
  }

  Future<BaseResponse<dynamic>> delete(String id) {
    final cancelToken = CancelToken();
    return getResponse(
      () => restClient.delete(id: id, cancelToken: cancelToken),
      cancelToken: cancelToken,
    );
  }
}
