// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'dart:async';
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import '../../models/models.dart';
import '../repositories/product_repository.dart';

class ProductsPagingDataSource with AnimatedInfinitePaginationController<Product> {
  late final repository = ProductRepository();

  /// decide whether two object represent the same Item
  @override
  bool areItemsTheSame(Product oldItem, Product newItem) {
    return oldItem.id == newItem.id;
  }

  /// fetch data from repository and emit new state
  @override
  Future<void> fetchData(int page) async {
    // emit loading
    emitState(const PaginationLoadingState());

    // fetch data from server
    try {
      final response = await repository.findAll(page);
      final result = response.data;
      if (result?.data != null && response.isSuccess) {
        // emit fetched data
        emitState(PaginationSuccessState(result!.data!.toList()));
      } else {
        // emit error
        emitState(const PaginationErrorState());
      }

      // tell the controller the total of items,
      // this will stop loading more data when last data-chunk is loaded.
      setTotal(result?.total ?? 0);
    } catch (_) {
      // emit error
      emitState(const PaginationErrorState());
    }
  }

  void dispose() {
    repository.dispose();
  }
}
