// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'dart:async';
import 'package:injectable/injectable.dart';
import 'package:flutter/foundation.dart';
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import 'package:products/src/data/models/entities/product/product.dart';
import 'package:products/src/data/repositories/products/products_repository.dart';

@LazySingleton(scope: 'productsPaging')
class ProductsPagingController with AnimatedInfinitePaginationController<Product> {
  final ProductsRepository _repository;
  ProductsPagingController(this._repository);

  /// decide whether two object represent the same Item
  @override
  bool areItemsTheSame(Product oldItem, Product newItem) {
    return oldItem.id == newItem.id;
  }

  /// fetch data from repository and emit new state
  @override
  Future<void> fetchData(int page) async {
    // emit loading
    emitState(const PaginationLoadingState());

    // fetch data from server
    try {
      await for (final response in _repository.findAll(page)) {
        final result = response.data;
        if (result?.data != null && response.isSuccess) {
          // emit fetched data
          emitState(PaginationSuccessState(result!.data!.toList(), cached: result.cached));
          setTotal(result.total ?? 0);
        } else {
          // emit error
          emitState(const PaginationErrorState());
        }
      }
    } catch (error) {
      // emit error
      emitState(const PaginationErrorState());
      if (kDebugMode) print(error);
    }
  }

  /// add inserted [product] to list
  void insertProduct(Product product) {
    insertItem(0, product);
    setTotal(total + 1);
  }

  /// update [product] in [items]
  void updateProduct(Product product) {
    updateItem(product, findIndex: (Product item) => item.id == product.id);
  }

  /// remove [product] from [items]
  void deleteProduct(Product product) {
    final index = items.value.indexWhere((e) => e.item.id == product.id);
    if (index == -1) return;

    deleteItem(index);
    setTotal(total - 1);
  }

  /// cancel all pending requests
  void dispose() {
    _repository.dispose();
  }
}
