// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:flutter/material.dart';
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import '../animations/customized_animated_widget.dart';
import '../loaders/loader.dart';
import 'pagination_load_widget.dart';
import 'pagination_error_widget.dart';

/// [C] a controller extends [AnimatedInfinitePaginationController]
/// [T] the Model of item
class InfiniteScrollView<T, C extends AnimatedInfinitePaginationController<T>> extends StatelessWidget {
  /// [controller] a class extends [AnimatedInfinitePaginationController]
  final C controller;

  /// [itemBuilder] callback return [Widget] with item [T].
  final Widget Function(BuildContext context, T item, int index) itemBuilder;

  /// pass [topWidgets] when you want to place a widget at the top of the first [itemBuilder] widget.
  final List<SliverCustomWidget>? topWidgets;

  /// [onRefresh] callback called when user swipe to refresh list.
  final Function()? onRefresh;

  /// [retry] callback called when pagination request failed and user press on [PaginationErrorWidget].
  final Function()? retry;

  /// wrap [ScrollView] in [RefreshIndicator] when [refreshIndicator] == `true`
  ///
  /// default value is `true`
  final bool refreshIndicator;

  /// Scroll Direction default value is [Axis.vertical]
  final Axis scrollDirection;

  /// A delegate that controls the layout of the children within the [GridView].
  final SliverGridDelegate? gridDelegate;

  /// Whether to spawn a new isolate on which to calculate the diff on.
  final bool? spawnIsolate;

  /// [noItemsWidget] is a widget appears after fetch first page data and the result is empty
  final Widget? noItemsWidget;

  /// [loadingWidget] is a widget appears when first page is in loading state.
  final Widget? loadingWidget;

  /// build [AnimatedInfiniteScrollView] with basic configuration
  const InfiniteScrollView({
    required this.controller,
    required this.itemBuilder,
    this.refreshIndicator = true,
    this.loadingWidget,
    this.onRefresh,
    this.topWidgets,
    this.retry,
    this.scrollDirection = Axis.vertical,
    this.gridDelegate,
    this.spawnIsolate,
    this.noItemsWidget,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return AnimatedInfiniteScrollView<T>(
      controller: controller,
      options: AnimatedInfinitePaginationOptions(
        refreshIndicator: refreshIndicator,
        topWidgets: topWidgets,
        footerLoadingWidget: const Center(child: PaginationLoaderWidget()),
        loadingWidget: loadingWidget ?? const CustomizedAnimatedWidget(child: Loader()),
        errorWidget: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            PaginationErrorWidget(
              retry: retry ?? () => controller.fetchNewChunk(page: controller.page),
            ),
          ],
        ),
        onRefresh: onRefresh,
        itemBuilder: itemBuilder,
        gridDelegate: gridDelegate,
        spawnIsolate: spawnIsolate,
        noItemsWidget: noItemsWidget,
        scrollDirection: scrollDirection,
      ),
    );
  }
}
