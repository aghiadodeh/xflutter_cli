// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:isar/isar.dart';
import '../isar/isar.dart';
import '../models/isar_models.dart';
import 'package:xflutter_cli_test_application/models/models.dart';
import 'package:xflutter_cli_test_application/utilities/di/di.dart';
import 'package:xflutter_cli_test_application/environment/environment.dart';

class UserLocalDataSource {
  Isar get isar => findInstance<Isar>();

  /// [User] query builder with pagination
  QueryBuilder<IsarUser, IsarUser, QAfterLimit> _userQueryBuilder({int? page}) {
    return isar.isarUsers
        .where()
        .sortById()
        .optional(page != null, (q) => q.offset(offset(page!, Environment.perPage)).limit(Environment.perPage));
  }

  /// find [User] from local-database
  IsarUser? findOne(int? id) {
    return isar.isarUsers.where().idEqualTo(id).findFirstSync();
  }

  /// fetch cached [User] list from local-database
  List<IsarUser> findAll({int? page}) {
    return _userQueryBuilder(page: page).findAllSync();
  }

  /// add/update [User] into local-database
  void insert(User data) {
    isar.writeTxnSync(() => isar.isarUsers.putByIdSync(data.toIsar()));
  }

  /// save list of [User] in local-database
  void insertAll(List<User> data, {int? page}) {
    // convert data to isar-entities
    final objects = data.map((e) => e.toIsar()).toList();

    // find old cached list
    final local = findAll(page: page).map((e) => e.id).toList();
    final ids = data.map((e) => e.id).toList();

    // find difference between old list and new list
    final difference = local.where((element) => !ids.contains(element)).toList();

    isar.writeTxnSync(() {
      // delete difference
      isar.isarUsers.deleteAllByIdSync(difference);

      // save new data
      isar.isarUsers.putAllByIdSync(objects);
    });
  }

  /// delete [User] from local-database
  void delete(int? id) {
    isar.writeTxnSync(() => isar.isarUsers.deleteByIdSync(id));
  }

  /// count all documents in local-database
  int count() {
    return _userQueryBuilder().countSync();
  }
}
