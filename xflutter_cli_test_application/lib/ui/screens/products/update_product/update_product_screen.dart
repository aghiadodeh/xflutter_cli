// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:xflutter_cli_test_application/data/models/entities/product/product.dart';
import 'package:flutter/material.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:xflutter_cli_test_application/di/app_injectable.config.dart';
import './viewmodels/update_product_viewmodel.dart';
import 'package:auto_route/auto_route.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:responsive_builder/responsive_builder.dart';
import 'mobile/update_product_mobile_screen.dart';
import 'package:xflutter_cli_test_application/data/models/di/di_scope/di_scope.dart';
import 'package:xflutter_cli_test_application/ui/widgets/loaders/live_data_loader.dart';
import 'package:xflutter_cli_test_application/ui/widgets/instance/lifecycle_owner.dart';
import 'package:xflutter_cli_test_application/extensions/di_extension.dart';
import 'package:xflutter_cli_test_application/ui/widgets/core/base_scaffold.dart';
import 'package:xflutter_cli_test_application/ui/widgets/core/base_appbar.dart';

@RoutePage(name: 'updateProduct')
class UpdateProductScreen extends StatefulWidget {
  final int id;

  const UpdateProductScreen({required this.id, super.key});

  @override
  State<UpdateProductScreen> createState() => _UpdateProductScreenState();
}

class _UpdateProductScreenState extends State<UpdateProductScreen> with LifecycleOwner<UpdateProductScreen, UpdateProductViewModel>, ObserverMixin {
  @override
  void onInitState() {
    viewModel.params.id = widget.id;
    super.onInitState();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // screen body
        BaseScaffold(
          appBar: (context, theme) => BaseAppBar(title: 'update_product'.tr()),
          builder: (context, theme) => SafeArea(
            child: LiveDataBuilder<LiveResult<Product>>(
              data: viewModel.params.product,
              builder: (BuildContext context, LiveResult<Product> value) {
                if (value.state == ResultState.loading) {
                  // product in fetching status
                  return const Center(
                    child: CircularProgressIndicator.adaptive(),
                  );
                } else if (value.state == ResultState.success) {
                  // product details fetched successfully
                  return ScreenTypeLayout.builder(
                    mobile: (_) => const UpdateProductMobileScreen(),
                  );
                } else if (value.state == ResultState.error) {
                  // display error
                  return Center(child: Text(value.error.toString()));
                }
                return const SizedBox.shrink();
              },
            ),
          ),
        ),

        // full-screen loader
        LiveDataFullScreenLoader(loading: viewModel.baseParams.loading),
      ],
    );
  }

  @override
  DiScope get diScope => DiScope(
        name: 'updateProduct',
        factory: getIt.initUpdateProductScope,
        dependencies: [],
      );
}
