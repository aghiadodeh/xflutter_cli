// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:injectable/injectable.dart';
import 'package:flutterx_live_data/flutterx_live_data.dart';
import 'package:xflutter_cli_modules_application/core/storage/secure_storage.dart';
import 'package:xflutter_cli_modules_application/common/data/models/entities/user/user.dart';
import 'dart:convert' as convert;

@lazySingleton
class AuthenticationController {
  final MutableLiveData<User> _user = MutableLiveData<User>(value: const User());
  LiveData<User> get user => _user;

  /// set default values
  Future<void> initialize() async {
    final user = await getUser();
    _user.postValue(user);
  }

  /// return true if [User] has data in [SecureStorage]
  Future<bool> isLoggedIn() async {
    final json = await SecureStorage.read(key: 'user');
    return json != null;
  }

  /// save loggedIn [User] info in [SecureStorage]
  Future<void> setUser(User? user) async {
    if (user == null) return;
    _user.postValue(user);
    await SecureStorage.write(
      key: 'user',
      value: convert.json.encode(user.toJson()),
    );
  }

  /// get [User] info from [SecureStorage]
  Future<User> getUser() async {
    final json = await SecureStorage.read(key: 'user');
    final user = User.fromJson(convert.json.decode(json ?? '{}'));
    return user;
  }

  /// save jwt [token] in [SecureStorage]
  Future<void> setToken(String? token) async {
    if (token == null) return;
    await SecureStorage.write(key: 'token', value: token);
  }

  /// get jwt token from [SecureStorage]
  Future<String?> getToken() async {
    return SecureStorage.read(key: 'token');
  }

  /// clear auth data from [SecureStorage]
  Future<void> logOut() async {
    await SecureStorage.delete('user');
    await SecureStorage.delete('token');
  }
}
