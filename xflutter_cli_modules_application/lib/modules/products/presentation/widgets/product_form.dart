// Generated By XFlutter Cli.
//
// more info: https://xflutter-cli.com
import 'package:xflutter_cli_modules_application/modules/products/data/models/entities/product/product.dart';
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:reactive_forms/reactive_forms.dart';
import 'package:xflutter_cli_modules_application/common/ui/resources/dimensions/dimensions.dart';
import 'package:xflutter_cli_modules_application/common/ui/widgets/buttons/customized_button.dart';
import 'package:xflutter_cli_modules_application/common/ui/widgets/text_fields/customized_reactive_text_field.dart';

class ProductForm extends StatefulWidget {
  final Product? product;
  final Function(Map<String, dynamic> value) submit;

  const ProductForm({this.product, required this.submit, super.key});

  @override
  State<ProductForm> createState() => _ProductFormState();
}

class _ProductFormState extends State<ProductForm> {
  late final productForm = FormGroup({
    'title': FormControl<String>(
      validators: [Validators.required],
    ),
    'description': FormControl<String>(
      validators: [Validators.required],
    ),
    'category': FormControl<String>(
      validators: [Validators.required],
    ),
    'price': FormControl<double>(
      validators: [Validators.required],
    ),
    'discountPercentage': FormControl<double>(
      validators: [Validators.required],
    ),
    'rating': FormControl<double>(
      validators: [Validators.required],
    ),
    'stock': FormControl<int>(
      validators: [Validators.required],
    ),
    'brand': FormControl<String>(
      validators: [Validators.required],
    ),
    'sku': FormControl<String>(
      validators: [Validators.required],
    ),
    'weight': FormControl<int>(
      validators: [Validators.required],
    ),
    'warrantyInformation': FormControl<String>(
      validators: [Validators.required],
    ),
    'shippingInformation': FormControl<String>(
      validators: [Validators.required],
    ),
    'availabilityStatus': FormControl<String>(
      validators: [Validators.required],
    ),
    'returnPolicy': FormControl<String>(
      validators: [Validators.required],
    ),
    'minimumOrderQuantity': FormControl<int>(
      validators: [Validators.required],
    ),
    'thumbnail': FormControl<String>(
      validators: [Validators.required],
    ),
  });

  @override
  void initState() {
    super.initState();
    updateFormValue(widget.product);
  }

  @override
  void didUpdateWidget(covariant ProductForm oldWidget) {
    if (oldWidget.product != widget.product) {
      // update form inputs with new product data
      updateFormValue(widget.product);
    }
    super.didUpdateWidget(oldWidget);
  }

  /// update form fields with [product] value
  void updateFormValue(Product? product) {
    if (widget.product != null) {
      productForm.patchValue(product!.toJson());
    }
  }

  @override
  Widget build(BuildContext context) {
    final formGroup = productForm;

    return ReactiveForm(
      formGroup: formGroup,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // form fields
          Column(
            children: [
              // title
              CustomizedReactiveFormField<String>(
                formControlName: 'title',
                labelText: 'title'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('description'),
              ),
              const SizedBox(height: formSpacing),

              // description
              CustomizedReactiveFormField<String>(
                formControlName: 'description',
                labelText: 'description'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('category'),
              ),
              const SizedBox(height: formSpacing),

              // category
              CustomizedReactiveFormField<String>(
                formControlName: 'category',
                labelText: 'category'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('price'),
              ),
              const SizedBox(height: formSpacing),

              // price
              CustomizedReactiveFormField<double>(
                formControlName: 'price',
                labelText: 'price'.tr(),
                keyboardType: TextInputType.number,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('discountPercentage'),
              ),
              const SizedBox(height: formSpacing),

              // discountPercentage
              CustomizedReactiveFormField<double>(
                formControlName: 'discountPercentage',
                labelText: 'discountPercentage'.tr(),
                keyboardType: TextInputType.number,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('rating'),
              ),
              const SizedBox(height: formSpacing),

              // rating
              CustomizedReactiveFormField<double>(
                formControlName: 'rating',
                labelText: 'rating'.tr(),
                keyboardType: TextInputType.number,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('stock'),
              ),
              const SizedBox(height: formSpacing),

              // stock
              CustomizedReactiveFormField<int>(
                formControlName: 'stock',
                labelText: 'stock'.tr(),
                keyboardType: TextInputType.number,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('brand'),
              ),
              const SizedBox(height: formSpacing),

              // brand
              CustomizedReactiveFormField<String>(
                formControlName: 'brand',
                labelText: 'brand'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('sku'),
              ),
              const SizedBox(height: formSpacing),

              // sku
              CustomizedReactiveFormField<String>(
                formControlName: 'sku',
                labelText: 'sku'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('weight'),
              ),
              const SizedBox(height: formSpacing),

              // weight
              CustomizedReactiveFormField<int>(
                formControlName: 'weight',
                labelText: 'weight'.tr(),
                keyboardType: TextInputType.number,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('warrantyInformation'),
              ),
              const SizedBox(height: formSpacing),

              // warranty information
              CustomizedReactiveFormField<String>(
                formControlName: 'warrantyInformation',
                labelText: 'warrantyInformation'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('shippingInformation'),
              ),
              const SizedBox(height: formSpacing),

              // shipping information
              CustomizedReactiveFormField<String>(
                formControlName: 'shippingInformation',
                labelText: 'shippingInformation'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('availabilityStatus'),
              ),
              const SizedBox(height: formSpacing),

              // availability status
              CustomizedReactiveFormField<String>(
                formControlName: 'availabilityStatus',
                labelText: 'availabilityStatus'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('returnPolicy'),
              ),
              const SizedBox(height: formSpacing),

              // return policy
              CustomizedReactiveFormField<String>(
                formControlName: 'returnPolicy',
                labelText: 'returnPolicy'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('minimumOrderQuantity'),
              ),
              const SizedBox(height: formSpacing),

              // minimum order quantity
              CustomizedReactiveFormField<int>(
                formControlName: 'minimumOrderQuantity',
                labelText: 'minimumOrderQuantity'.tr(),
                keyboardType: TextInputType.number,
                textInputAction: TextInputAction.next,
                onSubmitted: (_) => formGroup.focus('thumbnail'),
              ),
              const SizedBox(height: formSpacing),

              // thumbnail
              CustomizedReactiveFormField<String>(
                formControlName: 'thumbnail',
                labelText: 'thumbnail'.tr(),
                keyboardType: TextInputType.text,
                textInputAction: TextInputAction.done,
                onSubmitted: (_) {},
              ),
              const SizedBox(height: formSpacing),
            ],
          ),

          // submit widget
          SizedBox(
            width: double.infinity,
            child: CustomizedButton(
              child: Text('next'.tr()),
              callback: () {
                if (formGroup.valid) {
                  widget.submit(formGroup.value);
                } else {
                  formGroup.markAllAsTouched();
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}
